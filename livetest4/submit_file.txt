// app/config/config.js
export const PORT = 5900;
export const DATABASE = "mongodb://localhost:27017/livetest4";
export const JWT_KEY  = "ABC123122323212ABC1213"
export const JWT_EXPIRY = 30*24*60*60;
export const WEB_CACHE = false;
export const MAX_JSON_SIZE = "10MB";
export const URL_ENCODE = true;
export const REQUEST_TIME= 20*60*1000;
export const REQUEST_LIMIT= 1000;


//app/controller/users_controller.js
import bcrypt from 'bcryptjs';
import UserModel from '../model/user_model.js';
import { tokenEncode } from '../utility/token_util.js';

export const register = async (req, res) => {

    try {
        const { firstName, lastName, mobile,  email, password } = req.body;
        const hashPassword = await bcrypt.hash(password, 10);

        const existingUser = await UserModel.findOne({ email });

        if (existingUser) {
            return res.status(400).json({ message: "User already exists" });
        }

        const user = await UserModel.create({
            firstName,
            lastName,
            email,
            password: hashPassword,
            mobile
        });
        if (!user) {
            return res.status(400).json({ message: "User registration failed" });
        }
        if (user) {
        user.password = undefined;
        const token = tokenEncode(user.email, user._id);
        return res.status(200).json({ message: "User registered successfully", 'token': token, user });
        }
        
    }
    catch (error) {
        console.log(error);
        return res.status(400).json({ message: "User registration failed" });
    }
};

export const login = async (req, res) => {
    try {
        console.log(req.body);
        const { email, password } = req.body;

        if (!email || !password) {
            return res.status(400).json({ message: "Email and password are required" });
        }

        const user = await UserModel.findOne({ email }).select("+password");
        console.log(user);

        if (!user) {
            return res.status(400).json({ message: "User not found" });
        }

        if (!user.password) {
            return res.status(400).json({ message: "Password not found for this user" });
        }

        console.log(user.password);

        const isPasswordMatch = await bcrypt.compare(password, user.password);
        if (!isPasswordMatch) {
            return res.status(400).json({ message: "Invalid password" });
        }

        console.log(isPasswordMatch);

        const token = await tokenEncode(email, user._id);
        user.password = undefined;
        return res.status(200).json({ message: "Login successful", token, user });
    } catch (error) {
        console.log(error);
        return res.status(500).json({ message: "Login failed", error: error.message });
    }
};


export const profile = async (req, res) => {
    try {
        const user = await UserModel.findById(req.headers.user.userId);
        if (!user) {
            return res.status(404).json({ message: "User not found" });
        }
        return res.status(200).json({ message: "User profile", user });
    }   
    catch (error) {
        console.log(error);
        return res.status(404).json({ message: "User profile not found" });
    }
};


export const updateProfile = async (req, res) => {
    try {
        const user = await UserModel.findById(req.headers.user.userId);
        if (!user) {
            return res.status(404).json({ message: "User not found" });
        }
        const { firstName, lastName, mobile, password } = req.body;
        if (!firstName && !lastName && !mobile && !password) {
            return res.status(400).json({ message: "At least one field is required to update - firstName, lastName, mobile, password" });
        }
        if (firstName) user.firstName = firstName;
        if (lastName) user.lastName = lastName;
        if (mobile) user.mobile = mobile;
        if (password) {
            const hashPassword = await bcrypt.hash(password, 10);
            user.password = hashPassword;
        }
        await user.save();
        if (password && !firstName && !lastName && !mobile) {
            user.password = undefined;
            return res.status(200).json({ message: "User profile updated successfully", password: 'pass updated' });
        }  
        if (password && firstName || lastName || mobile) {
            user.password = undefined;
            return res.status(200).json({ message: "User profile updated successfully", user, password: 'pass updated' });
        }  
        return res.status(200).json({ message: "User profile updated successfully", user });
        
    }
    catch (error) {
        console.log(error);
        return res.status(404).json({ message: "User profile not found" });
    }

};


//app/middlewares/auth_middleware.js
import { tokenDecode } from "../utility/token_util.js";

export default (req, res, next) => {
  let token = req.headers["authorization"];
  console.log(token);
  if (!token) {
    return res.status(401).json({ message: "Unauthorized" });
  }

  if (token.startsWith("Bearer ")) {
    token = token.slice(7, token.length);
  }
  try {
    const decoded = tokenDecode(token);
    console.log("Decoded Token:", decoded);
    req.headers.user = decoded;
    next();
  } catch (error) {
    return res
      .status(403)
      .json({ message: "Error decoding token", error: error.message });
  }
};


//app/model/user_model.js
import mongoose from "mongoose";

const userSchema = new mongoose.Schema({
    firstName: {
        type: String,
        required: true
    },
    lastName: {
        type: String,
        required: true
    },
    email: {
        type: String,
        required: true,
        unique: true
    },
    password: {
        type: String,
        required: true,
        select: false 
    },
    mobile: {
        type: String,
        required: true
    },
}, { timestamps: true, versionKey: false });

const UserModel = mongoose.model("users", userSchema);
export default UserModel;

//app/utility/token_util.js
import jwt from 'jsonwebtoken';
import { JWT_EXPIRY, JWT_KEY } from '../config/config.js';

export const tokenEncode = (email, userId) => {
    const KEY = JWT_KEY;
    const EXPIRY = { expiresIn: JWT_EXPIRY };

    const PAYLOAD = {
        email: email,
        userId: userId,
    };

    try {
        const token = jwt.sign(PAYLOAD, KEY, EXPIRY);
        console.log('Generated Token:', token);  
        return token;
    } catch (error) {
        console.error('Error generating token:', error);
        return null; 
    }
};

export const tokenDecode = (token) => {
    try {
        const decoded = jwt.verify(token, JWT_KEY);
        return decoded;
    } catch (error) {
        console.error("Error decoding token:", error);
        throw error;
    }
};

//routes/api.js
import express from "express";
import * as UserController from "../app/controller/users_controller.js";
import AuthMiddleware from "../app/middlewares/auth_middleware.js";

const router = express.Router();

// user auth
router.post('/register', UserController.register);
router.post('/login', UserController.login);

// user profile
router.get('/profile', AuthMiddleware, UserController.profile);
router.post('/update-profile', AuthMiddleware, UserController.updateProfile);



export default router;


//package.json
{
  "name": "portfolio_crud_expressjs",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/muj-i/portfolio_crud_expressjs.git"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "module",
  "bugs": {
    "url": "https://github.com/muj-i/portfolio_crud_expressjs/issues"
  },
  "homepage": "https://github.com/muj-i/portfolio_crud_expressjs#readme",
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "express": "^4.21.2",
    "express-rate-limit": "^7.5.0",
    "helmet": "^8.0.0",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.9.6",
    "nodemailer": "^6.10.0",
    "nodemon": "^3.1.9"
  }
}
